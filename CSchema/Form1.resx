<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AxSpreadsheet1.OcxState" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACFTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5BeEhvc3QrU3RhdGUBAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAnQoAAAIB
        AAAAAQAAAAAbAAAAQ2Fubm90IExpY2Vuc2UgaW4gdGhpcyBob3N0AAAAAG0KAAA8P3htbCB2ZXJzaW9u
        PSIxLjAiPz4NCjxzczpXb3JrYm9vayB4bWxuczp4PSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9m
        ZmljZTpleGNlbCINCiB4bWxuczpzcz0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6c3By
        ZWFkc2hlZXQiDQogeG1sbnM6Yz0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6Y29tcG9u
        ZW50OnNwcmVhZHNoZWV0Ij4NCiA8eDpFeGNlbFdvcmtib29rPg0KICA8eDpQcm90ZWN0U3RydWN0dXJl
        PkZhbHNlPC94OlByb3RlY3RTdHJ1Y3R1cmU+DQogIDx4OkFjdGl2ZVNoZWV0PjA8L3g6QWN0aXZlU2hl
        ZXQ+DQogPC94OkV4Y2VsV29ya2Jvb2s+DQogPHNzOlN0eWxlcz4NCiAgPHNzOlN0eWxlIHNzOklEPSJE
        ZWZhdWx0Ij4NCiAgIDxzczpBbGlnbm1lbnQgc3M6SG9yaXpvbnRhbD0iQXV0b21hdGljIiBzczpSb3Rh
        dGU9IjAuMCIgc3M6VmVydGljYWw9IkJvdHRvbSINCiAgICBzczpSZWFkaW5nT3JkZXI9IkNvbnRleHQi
        Lz4NCiAgIDxzczpCb3JkZXJzPg0KICAgPC9zczpCb3JkZXJzPg0KICAgPHNzOkZvbnQgc3M6Rm9udE5h
        bWU9IuWui+S9kyIgc3M6U2l6ZT0iMTEiIHNzOkNvbG9yPSJBdXRvbWF0aWMiIHNzOkJvbGQ9IjAiDQog
        ICAgc3M6SXRhbGljPSIwIiBzczpVbmRlcmxpbmU9Ik5vbmUiLz4NCiAgIDxzczpJbnRlcmlvciBzczpD
        b2xvcj0iQXV0b21hdGljIiBzczpQYXR0ZXJuPSJOb25lIi8+DQogICA8c3M6TnVtYmVyRm9ybWF0IHNz
        OkZvcm1hdD0iR2VuZXJhbCIvPg0KICAgPHNzOlByb3RlY3Rpb24gc3M6UHJvdGVjdGVkPSIxIi8+DQog
        IDwvc3M6U3R5bGU+DQogPC9zczpTdHlsZXM+DQogPGM6Q29tcG9uZW50T3B0aW9ucz4NCiAgPGM6TGFi
        ZWw+DQogICA8YzpDYXB0aW9uPk1pY3Jvc29mdCBPZmZpY2Ug55S15a2Q6KGo5qC8PC9jOkNhcHRpb24+
        DQogIDwvYzpMYWJlbD4NCiAgPGM6TWF4SGVpZ2h0PjgwJTwvYzpNYXhIZWlnaHQ+DQogIDxjOk1heFdp
        ZHRoPjgwJTwvYzpNYXhXaWR0aD4NCiAgPGM6TmV4dFNoZWV0TnVtYmVyPjQ8L2M6TmV4dFNoZWV0TnVt
        YmVyPg0KICA8YzpPcmlnaW5hbFNvdXJjZSBjOlR5cGU9IjYiLz4NCiA8L2M6Q29tcG9uZW50T3B0aW9u
        cz4NCiA8eDpXb3JrYm9va09wdGlvbnM+DQogIDxjOk9XQ1ZlcnNpb24+MTAuMC4wLjU2MDUgICAgICAg
        ICA8L2M6T1dDVmVyc2lvbj4NCiAgPHg6SGVpZ2h0Pjc2MjA8L3g6SGVpZ2h0Pg0KICA8eDpXaWR0aD4x
        NTI0MDwveDpXaWR0aD4NCiA8L3g6V29ya2Jvb2tPcHRpb25zPg0KIDxzczpXb3Jrc2hlZXQgc3M6TmFt
        ZT0iU2hlZXQxIj4NCiAgPHg6V29ya3NoZWV0T3B0aW9ucz4NCiAgIDx4OlNlbGVjdGVkLz4NCiAgIDx4
        OlZpZXdhYmxlUmFuZ2U+UjE6UjI2MjE0NDwveDpWaWV3YWJsZVJhbmdlPg0KICAgPHg6U2VsZWN0aW9u
        PlIxQzE8L3g6U2VsZWN0aW9uPg0KICAgPHg6VG9wUm93VmlzaWJsZT4wPC94OlRvcFJvd1Zpc2libGU+
        DQogICA8eDpMZWZ0Q29sdW1uVmlzaWJsZT4wPC94OkxlZnRDb2x1bW5WaXNpYmxlPg0KICAgPHg6UHJv
        dGVjdENvbnRlbnRzPkZhbHNlPC94OlByb3RlY3RDb250ZW50cz4NCiAgPC94OldvcmtzaGVldE9wdGlv
        bnM+DQogIDxjOldvcmtzaGVldE9wdGlvbnM+DQogIDwvYzpXb3Jrc2hlZXRPcHRpb25zPg0KICA8c3M6
        VGFibGUgc3M6RGVmYXVsdENvbHVtbldpZHRoPSI1NC4wIiBzczpEZWZhdWx0Um93SGVpZ2h0PSIxMi43
        NSI+DQogIDwvc3M6VGFibGU+DQogPC9zczpXb3Jrc2hlZXQ+DQogPHNzOldvcmtzaGVldCBzczpOYW1l
        PSJTaGVldDIiPg0KICA8eDpXb3Jrc2hlZXRPcHRpb25zPg0KICAgPHg6Vmlld2FibGVSYW5nZT5SMTpS
        MjYyMTQ0PC94OlZpZXdhYmxlUmFuZ2U+DQogICA8eDpTZWxlY3Rpb24+UjFDMTwveDpTZWxlY3Rpb24+
        DQogICA8eDpUb3BSb3dWaXNpYmxlPjA8L3g6VG9wUm93VmlzaWJsZT4NCiAgIDx4OkxlZnRDb2x1bW5W
        aXNpYmxlPjA8L3g6TGVmdENvbHVtblZpc2libGU+DQogICA8eDpQcm90ZWN0Q29udGVudHM+RmFsc2U8
        L3g6UHJvdGVjdENvbnRlbnRzPg0KICA8L3g6V29ya3NoZWV0T3B0aW9ucz4NCiAgPGM6V29ya3NoZWV0
        T3B0aW9ucz4NCiAgPC9jOldvcmtzaGVldE9wdGlvbnM+DQogIDxzczpUYWJsZSBzczpEZWZhdWx0Q29s
        dW1uV2lkdGg9IjU0LjAiIHNzOkRlZmF1bHRSb3dIZWlnaHQ9IjEyLjc1Ij4NCiAgPC9zczpUYWJsZT4N
        CiA8L3NzOldvcmtzaGVldD4NCiA8c3M6V29ya3NoZWV0IHNzOk5hbWU9IlNoZWV0MyI+DQogIDx4Oldv
        cmtzaGVldE9wdGlvbnM+DQogICA8eDpWaWV3YWJsZVJhbmdlPlIxOlIyNjIxNDQ8L3g6Vmlld2FibGVS
        YW5nZT4NCiAgIDx4OlNlbGVjdGlvbj5SMUMxPC94OlNlbGVjdGlvbj4NCiAgIDx4OlRvcFJvd1Zpc2li
        bGU+MDwveDpUb3BSb3dWaXNpYmxlPg0KICAgPHg6TGVmdENvbHVtblZpc2libGU+MDwveDpMZWZ0Q29s
        dW1uVmlzaWJsZT4NCiAgIDx4OlByb3RlY3RDb250ZW50cz5GYWxzZTwveDpQcm90ZWN0Q29udGVudHM+
        DQogIDwveDpXb3Jrc2hlZXRPcHRpb25zPg0KICA8YzpXb3Jrc2hlZXRPcHRpb25zPg0KICA8L2M6V29y
        a3NoZWV0T3B0aW9ucz4NCiAgPHNzOlRhYmxlIHNzOkRlZmF1bHRDb2x1bW5XaWR0aD0iNTQuMCIgc3M6
        RGVmYXVsdFJvd0hlaWdodD0iMTIuNzUiPg0KICA8L3NzOlRhYmxlPg0KIDwvc3M6V29ya3NoZWV0Pg0K
        PC9zczpXb3JrYm9vaz4NCgs=
</value>
  </data>
</root>