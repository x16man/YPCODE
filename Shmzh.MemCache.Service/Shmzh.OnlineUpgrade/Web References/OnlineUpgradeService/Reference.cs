//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3603
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.3603 版自动生成。
// 
#pragma warning disable 1591

namespace Shmzh.OnlineUpgrade.OnlineUpgradeService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="OnlineUpgradeSoap", Namespace="http://tempuri.org/")]
    public partial class OnlineUpgrade : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAppsVirtualRootOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUpgradeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckIsNeedZipOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZipFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTotalBytesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadFileBytesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public OnlineUpgrade() {
            this.Url = global::Shmzh.Monitor.OnlineUpgrade.Properties.Settings.Default.OnlineUpgrade_OnlineUpgradeService_OnlineUpgrade;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAppsVirtualRootCompletedEventHandler GetAppsVirtualRootCompleted;
        
        /// <remarks/>
        public event CheckVersionCompletedEventHandler CheckVersionCompleted;
        
        /// <remarks/>
        public event GetUpgradeListCompletedEventHandler GetUpgradeListCompleted;
        
        /// <remarks/>
        public event CheckIsNeedZipCompletedEventHandler CheckIsNeedZipCompleted;
        
        /// <remarks/>
        public event ZipFilesCompletedEventHandler ZipFilesCompleted;
        
        /// <remarks/>
        public event GetTotalBytesCompletedEventHandler GetTotalBytesCompleted;
        
        /// <remarks/>
        public event DownloadFileBytesCompletedEventHandler DownloadFileBytesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAppsVirtualRoot", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAppsVirtualRoot() {
            object[] results = this.Invoke("GetAppsVirtualRoot", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAppsVirtualRootAsync() {
            this.GetAppsVirtualRootAsync(null);
        }
        
        /// <remarks/>
        public void GetAppsVirtualRootAsync(object userState) {
            if ((this.GetAppsVirtualRootOperationCompleted == null)) {
                this.GetAppsVirtualRootOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppsVirtualRootOperationCompleted);
            }
            this.InvokeAsync("GetAppsVirtualRoot", new object[0], this.GetAppsVirtualRootOperationCompleted, userState);
        }
        
        private void OnGetAppsVirtualRootOperationCompleted(object arg) {
            if ((this.GetAppsVirtualRootCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppsVirtualRootCompleted(this, new GetAppsVirtualRootCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckVersion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckVersion(string product, ref string version) {
            object[] results = this.Invoke("CheckVersion", new object[] {
                        product,
                        version});
            version = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckVersionAsync(string product, string version) {
            this.CheckVersionAsync(product, version, null);
        }
        
        /// <remarks/>
        public void CheckVersionAsync(string product, string version, object userState) {
            if ((this.CheckVersionOperationCompleted == null)) {
                this.CheckVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckVersionOperationCompleted);
            }
            this.InvokeAsync("CheckVersion", new object[] {
                        product,
                        version}, this.CheckVersionOperationCompleted, userState);
        }
        
        private void OnCheckVersionOperationCompleted(object arg) {
            if ((this.CheckVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckVersionCompleted(this, new CheckVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUpgradeList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetUpgradeList(string product) {
            object[] results = this.Invoke("GetUpgradeList", new object[] {
                        product});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUpgradeListAsync(string product) {
            this.GetUpgradeListAsync(product, null);
        }
        
        /// <remarks/>
        public void GetUpgradeListAsync(string product, object userState) {
            if ((this.GetUpgradeListOperationCompleted == null)) {
                this.GetUpgradeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUpgradeListOperationCompleted);
            }
            this.InvokeAsync("GetUpgradeList", new object[] {
                        product}, this.GetUpgradeListOperationCompleted, userState);
        }
        
        private void OnGetUpgradeListOperationCompleted(object arg) {
            if ((this.GetUpgradeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUpgradeListCompleted(this, new GetUpgradeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckIsNeedZip", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckIsNeedZip(string product) {
            object[] results = this.Invoke("CheckIsNeedZip", new object[] {
                        product});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckIsNeedZipAsync(string product) {
            this.CheckIsNeedZipAsync(product, null);
        }
        
        /// <remarks/>
        public void CheckIsNeedZipAsync(string product, object userState) {
            if ((this.CheckIsNeedZipOperationCompleted == null)) {
                this.CheckIsNeedZipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckIsNeedZipOperationCompleted);
            }
            this.InvokeAsync("CheckIsNeedZip", new object[] {
                        product}, this.CheckIsNeedZipOperationCompleted, userState);
        }
        
        private void OnCheckIsNeedZipOperationCompleted(object arg) {
            if ((this.CheckIsNeedZipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckIsNeedZipCompleted(this, new CheckIsNeedZipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ZipFiles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ZipFiles(string product) {
            this.Invoke("ZipFiles", new object[] {
                        product});
        }
        
        /// <remarks/>
        public void ZipFilesAsync(string product) {
            this.ZipFilesAsync(product, null);
        }
        
        /// <remarks/>
        public void ZipFilesAsync(string product, object userState) {
            if ((this.ZipFilesOperationCompleted == null)) {
                this.ZipFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZipFilesOperationCompleted);
            }
            this.InvokeAsync("ZipFiles", new object[] {
                        product}, this.ZipFilesOperationCompleted, userState);
        }
        
        private void OnZipFilesOperationCompleted(object arg) {
            if ((this.ZipFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZipFilesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTotalBytes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetTotalBytes(string product) {
            object[] results = this.Invoke("GetTotalBytes", new object[] {
                        product});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetTotalBytesAsync(string product) {
            this.GetTotalBytesAsync(product, null);
        }
        
        /// <remarks/>
        public void GetTotalBytesAsync(string product, object userState) {
            if ((this.GetTotalBytesOperationCompleted == null)) {
                this.GetTotalBytesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTotalBytesOperationCompleted);
            }
            this.InvokeAsync("GetTotalBytes", new object[] {
                        product}, this.GetTotalBytesOperationCompleted, userState);
        }
        
        private void OnGetTotalBytesOperationCompleted(object arg) {
            if ((this.GetTotalBytesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTotalBytesCompleted(this, new GetTotalBytesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadFileBytes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadFileBytes(string product, string fileName) {
            object[] results = this.Invoke("DownloadFileBytes", new object[] {
                        product,
                        fileName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadFileBytesAsync(string product, string fileName) {
            this.DownloadFileBytesAsync(product, fileName, null);
        }
        
        /// <remarks/>
        public void DownloadFileBytesAsync(string product, string fileName, object userState) {
            if ((this.DownloadFileBytesOperationCompleted == null)) {
                this.DownloadFileBytesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadFileBytesOperationCompleted);
            }
            this.InvokeAsync("DownloadFileBytes", new object[] {
                        product,
                        fileName}, this.DownloadFileBytesOperationCompleted, userState);
        }
        
        private void OnDownloadFileBytesOperationCompleted(object arg) {
            if ((this.DownloadFileBytesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadFileBytesCompleted(this, new DownloadFileBytesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetAppsVirtualRootCompletedEventHandler(object sender, GetAppsVirtualRootCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppsVirtualRootCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAppsVirtualRootCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CheckVersionCompletedEventHandler(object sender, CheckVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string version {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetUpgradeListCompletedEventHandler(object sender, GetUpgradeListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUpgradeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUpgradeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CheckIsNeedZipCompletedEventHandler(object sender, CheckIsNeedZipCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckIsNeedZipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckIsNeedZipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ZipFilesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTotalBytesCompletedEventHandler(object sender, GetTotalBytesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTotalBytesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTotalBytesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DownloadFileBytesCompletedEventHandler(object sender, DownloadFileBytesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadFileBytesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadFileBytesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591